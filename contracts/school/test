
/*
func TestRingClient_NewRing(t *testing.T) {
	order1 := createOrder(
		types.HexToAddress("0x0c0b638ffccb4bdc4c0d0d5fef062fc512c92511"),
		types.HexToAddress("0x96124db0972e3522a9b3910578b3f2e1a50159c7"),
		big.NewInt(100),
		big.NewInt(1000),
		types.Hex2Bytes("11293da8fdfe3898eae7637e429e7e93d17d0d8293a4d1b58819ac0ca102b446"),
	)
	order1.Owner = types.HexToAddress("0xb5fab0b11776aad5ce60588c16bd59dcfd61a1c2")

	order2 := createOrder(
		types.HexToAddress("0x96124db0972e3522a9b3910578b3f2e1a50159c7"),
		types.HexToAddress("0x0c0b638ffccb4bdc4c0d0d5fef062fc512c92511"),
		big.NewInt(1000),
		big.NewInt(100),
		types.Hex2Bytes("07ae9ee56203d29171ce3de536d7742e0af4df5b7f62d298a0445d11e466bf9e"),
	)
	order2.Owner = types.HexToAddress("0x48ff2269e58a373120FFdBBdEE3FBceA854AC30A")

	ring := &types.Ring{}
	ring.Orders = make([]*types.FilledOrder, 0)
	fOrder1 := &types.FilledOrder{}
	fOrder1.OrderState = types.OrderState{}
	fOrder1.OrderState.RawOrder = *order1
	//fOrder1.RateAmountS = order1.AmountS
	//fOrder1.RateAmountS = big.NewInt(99)

	fOrder1.FeeSelection = uint8(0)

	fOrder2 := &types.FilledOrder{}
	fOrder2.OrderState = types.OrderState{}
	fOrder2.OrderState.RawOrder = *order2
	//fOrder2.RateAmountS = order2.AmountS
	//fOrder2.RateAmountS = big.NewInt(999)
	fOrder2.FeeSelection = uint8(0)

	cTest := &chainclient.Erc20Token{}
	client.NewContract(cTest, "0x0c0b638ffccb4bdc4c0d0d5fef062fc512c92511", chainclient.Erc20TokenAbiStr)

	cTest1 := &chainclient.Erc20Token{}
	client.NewContract(cTest1, "0x96124db0972e3522a9b3910578b3f2e1a50159c7", chainclient.Erc20TokenAbiStr)

	miner.LoopringInstance.Tokens[types.HexToAddress("0x0c0b638ffccb4bdc4c0d0d5fef062fc512c92511")] = cTest
	miner.LoopringInstance.Tokens[types.HexToAddress("0x96124db0972e3522a9b3910578b3f2e1a50159c7")] = cTest1

	miner.AvailableAmountS(fOrder1)
	t.Log(fOrder1.AvailableAmountS.Int64())
	ring.Orders = append(ring.Orders, fOrder1)
	ring.Orders = append(ring.Orders, fOrder2)
	ring.Hash = ring.GenerateHash()
	ring.ThrowIfTokenAllowanceOrBalanceIsInsuffcient = false

	t.Logf("ring.Hash:%x", ring.Hash)

	ringState := &types.RingState{}
	ringState.RawRing = ring
	miner.PriceRateCVSquare(ringState)
	//ringClient.NewRing(ringState)
}
*/